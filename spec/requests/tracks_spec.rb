require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/tracks", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Track. As you add validations to Track, be sure to
  # adjust the attributes here as well.
  let(:conference) { create(:conference) }

  let(:valid_attributes) {
    attributes_for(:track, conference_id: conference.id)
  }

  let(:invalid_attributes) {
    { name: nil, conference_id: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Track.create! valid_attributes
      get tracks_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      track = Track.create! valid_attributes
      get track_url(track)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_track_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      track = Track.create! valid_attributes
      get edit_track_url(track)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Track" do
        expect {
          post tracks_url, params: { track: valid_attributes }
        }.to change(Track, :count).by(1)
      end

      it "redirects to the created track" do
        post tracks_url, params: { track: valid_attributes }
        expect(response).to redirect_to(track_url(Track.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Track" do
        expect {
          post tracks_url, params: { track: invalid_attributes }
        }.to change(Track, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post tracks_url, params: { track: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: 2, conference_id: conference.id }
      }

      it "updates the requested track" do
        track = Track.create! valid_attributes
        patch track_url(track), params: { track: new_attributes }
        track.reload
        expect(track.name).not_to eql(valid_attributes[:name])
      end

      it "redirects to the track" do
        track = Track.create! valid_attributes
        patch track_url(track), params: { track: new_attributes }
        track.reload
        expect(response).to redirect_to(track_url(track))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        track = Track.create! valid_attributes
        patch track_url(track), params: { track: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested track" do
      track = Track.create! valid_attributes
      expect {
        delete track_url(track)
      }.to change(Track, :count).by(-1)
    end

    it "redirects to the tracks list" do
      track = Track.create! valid_attributes
      delete track_url(track)
      expect(response).to redirect_to(tracks_url)
    end
  end
end
