require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/tracks', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Track. As you add validations to Track, be sure to
  # adjust the attributes here as well.
  let(:conference) { create(:conference) }

  let(:valid_attributes) do
    attributes_for(:track, conference_id: conference.id)
  end

  let(:invalid_attributes) do
    { name: nil, conference_id: nil }
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      track = Track.create! valid_attributes
      get track_url(track)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Track' do
        expect do
          post tracks_url, params: { track: valid_attributes }
        end.to change(Track, :count).by(1)
      end

      it 'redirects to the created track' do
        post tracks_url, params: { track: valid_attributes }
        expect(response).to redirect_to(track_url(Track.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Track' do
        expect do
          post tracks_url, params: { track: invalid_attributes }
        end.to change(Track, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post tracks_url, params: { track: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested track' do
      track = Track.create! valid_attributes
      expect do
        delete track_url(track)
      end.to change(Track, :count).by(-1)
    end

    it 'redirects to the tracks list' do
      track = Track.create! valid_attributes
      delete track_url(track)
      expect(response).to redirect_to(conference_url(track.conference))
    end
  end
end
